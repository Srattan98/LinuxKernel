diff -Nur linux-3.13.0/arch/x86/syscalls/syscall_64.tbl /usr/src/linux-3.13.0/arch/x86/syscalls/syscall_64.tbl
--- linux-3.13.0/arch/x86/syscalls/syscall_64.tbl	2018-02-15 23:27:52.000000000 +0530
+++ /usr/src/linux-3.13.0/arch/x86/syscalls/syscall_64.tbl	2018-02-11 10:47:15.886711000 +0530
@@ -324,7 +324,8 @@
 315	common	sched_getattr		sys_ni_syscall
 316	common	renameat2		sys_ni_syscall
 317	common	seccomp			sys_seccomp
-
+318	common	hello			sys_hello
+319	common	hello2			sys_hello2
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation.
diff -Nur linux-3.13.0/hello/hello.c /usr/src/linux-3.13.0/hello/hello.c
--- linux-3.13.0/hello/hello.c	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13.0/hello/hello.c	2018-02-15 23:25:46.500750975 +0530
@@ -0,0 +1,195 @@
+#include<linux/kernel.h>
+#include<linux/unistd.h>
+#include<linux/init.h>
+#include<linux/module.h>
+#include<linux/file.h>
+#include<linux/fs.h>
+#include<linux/syscalls.h>
+#include<linux/fcntl.h>
+#include<asm/uaccess.h>
+#include<asm/errno.h>
+extern int errno;
+asmlinkage long sys_hello(int p,char *filename)
+{
+	char data[900]="";
+	int flag = 0;
+	struct task_struct *proces;
+	for_each_process(proces)
+	{
+		if(proces->pid==p)
+		{
+			int x=0;
+			int y=0;
+			flag = 1;
+			int dead=0;
+			long state=proces->state;
+			long piid=task_pid_nr(proces);
+			long st_prior=proces->static_prio;
+			for(dead=0;dead<=10;dead++);
+			long nor_prior=proces->normal_prio;
+			long rt_prior=proces->rt_priority;
+			int check=0;
+			long tgidd=task_tgid_nr(proces);
+			long cpu=proces->on_cpu;
+			struct sched_entity se = proces->se;
+			struct thread_struct td=proces->thread;
+			sigset_t sigset=proces->blocked;
+			sigset_t sigset1=proces->real_blocked;
+			char buf[100];
+			long prior=proces->prio;
+			printk(" PID: %ld\n rt_priority %ld\n st_priority \
+				 %ld\nState %ld\n Priority %ld\nNormal Priority\
+				 %ld\n tgid %ld\n cpu %ld\n on_rq %ld\n exec_st\
+				 art %ld\n vruntime %ld\n sum_exec_runtime %ld\
+				 \n prev_sum_exec_runtime %ld\n nr_migration  \
+				 %ld\n sp0 %ld\n sp %ld\n iopl %ld\n blocked \				 	signals: %ld\n real_blocked:" ,\ 
+				(long) piid,\
+				(long) rt_prior,\
+				(long) st_prior,\
+				(long) state,\
+				(long) prior,\
+				(long) nor_prior,\
+				(long) tgidd,\
+				(long) cpu,\
+				(long) se.on_rq,\
+				(long) se.exec_start,\
+				(long) se.vruntime,\
+				(long) se.sum_exec_runtime,\
+				(long) se.prev_sum_exec_runtime,\
+				(long) se.nr_migrations,\
+				(long) td.sp0,\
+				(long) td.sp,\
+				(long) td.iopl);
+			sprintf(buf,"%ld",state);
+			strcat(data,"State:");
+			strcat(data,buf);
+			for(check=0;check<10;check++)
+			{}
+			strcat(data,"\n");
+			sprintf(buf,"%ld",prior);
+			strcat(data,"Priority:");
+			strcat(data,buf);
+			strcat(data,"\n");
+			int result=0;
+			sprintf(buf,"%ld",st_prior);
+			strcat(data,"Static Priority:");
+			strcat(data,buf);
+			strcat(data,"\n");
+			sprintf(buf,"%ld",nor_prior);
+			strcat(data,"Normal Priority:");
+			strcat(data,buf);
+			for(result=0;result<=10;result++){}
+			strcat(data,"\n");
+			sprintf(buf,"%ld",rt_prior);
+			strcat(data,"rt_priority:");
+			strcat(data,buf);
+			strcat(data,"\n");
+			int hello=0;
+			sprintf(buf,"%ld",piid);
+			strcat(data,"PID:");
+			strcat(data,buf);
+			strcat(data,"\n");
+			sprintf(buf,"%ld",tgidd);
+			strcat(data,"\n TGID: ");
+			for(hello=0;hello<=10;hello++){}
+			strcat(data,buf);
+			sprintf(buf,"%ld",(long) cpu);
+			strcat(data,"\n CPU:");
+			strcat(data,buf);
+			long r6=(long)se.on_rq;
+			sprintf(buf,"%ld",r6);
+			strcat(data,"\n ON_RQ:");
+			strcat(data,buf);
+			long r5=(long)se.exec_start;
+			sprintf(buf,"%ld",r5);
+			strcat(data,"\n Exec Start:");
+			strcat(data,buf);
+			int tell=0;
+			long r4=(long)se.vruntime;
+			sprintf(buf,"%ld",r4);
+			strcat(data,"\n Vruntime:");
+			strcat(data,buf);
+			long r3=(long) se.sum_exec_runtime;
+			sprintf(buf,"%ld",r3);
+			strcat(data,"\n Sum Exec Runtime: ");
+			strcat(data,buf);
+			for(tell=0;tell<=10;tell++){}
+			long r2=(long)se.prev_sum_exec_runtime;
+			sprintf(buf,"%ld",r2);
+			strcat(data,"\n Prev Sum Exec Runtime:");
+			strcat(data,buf);
+			long r1=(long)se.nr_migrations;
+			sprintf(buf,"%ld",r1);
+			strcat(data,"\n NR Migration:");
+			strcat(data,buf);
+			int dead1=0;
+			long k1=(long)td.sp0;
+			sprintf(buf,"%ld",k1);
+			strcat(data,"\n sp0:");
+			strcat(data,buf);
+			long k2=(long)td.sp;
+			sprintf(buf,"%ld",k2);
+			strcat(data,"\n sp:");
+			strcat(data,buf);
+			long k3=(long)td.iopl;
+			sprintf(buf,"%ld",k3);
+			strcat(data,"\n iopl:");
+			strcat(data,buf);
+			for(x=0;x<=32;x++)
+			{
+			strcat(data,"\nBlocked : ");
+			if(sigismember(&sigset,x))
+			{
+				sprintf(buf,"%d ",x);
+				strcat(data,buf);
+				printk("%d ",x);
+			}
+			}
+			strcat(data,"\nReal Blocked : ");
+			printk("\n");
+			for(y=0;y<=32;y++){
+			if(sigismember(&sigset1,y))
+			{	
+				sprintf(buf,"%d ",y);
+				strcat(data,buf);
+				printk("%ld ",y);
+			}
+			}
+			printk("\n");
+		
+		}
+		
+	}
+	struct file *file;
+	loff_t pos = 0;
+	int fd;
+	mm_segment_t old_fs = get_fs();
+	set_fs(KERNEL_DS);
+	fd = sys_open(filename,O_WRONLY,0644);
+	if(flag==0)
+	{
+		printk("Error:No Such Proces");
+		return -ESRCH;
+	}
+	if(fd<0)
+	{
+//		int errno = 1;
+//		printk("%d",strerror(errno));
+		printk("Error: File Not Found");
+		return -ENOENT;
+	}
+	else if(fd>=0){
+	int l=strlen(data);
+	sys_write(1,data,l);
+	sys_write(fd,data,l);
+	file = fget(fd);
+	if(file)
+	{
+		vfs_write(file,data,strlen(data),&pos);
+		fput(file);
+	}
+	sys_close(fd);
+}
+	set_fs(old_fs);
+	return 0;
+}
diff -Nur linux-3.13.0/hello/Makefile /usr/src/linux-3.13.0/hello/Makefile
--- linux-3.13.0/hello/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13.0/hello/Makefile	2018-02-11 14:04:40.378501999 +0530
@@ -0,0 +1 @@
+obj-y := hello.o
diff -Nur linux-3.13.0/hello2/hello2.c /usr/src/linux-3.13.0/hello2/hello2.c
--- linux-3.13.0/hello2/hello2.c	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13.0/hello2/hello2.c	2018-02-11 14:28:28.262501999 +0530
@@ -0,0 +1,23 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/syscalls.h>
+//#include "processInfo.h"
+asmlinkage long sys_hello2(int k)
+{
+	struct task_struct *proces;
+	for_each_process(proces)
+	{
+		if(proces->pid==k)
+		{
+			printk("Process : %s\n Pid Number %ld",proces->comm,\
+				(long) task_pid_nr(proces));
+			if(proces->parent)
+			{
+				printk("parent process: %s\
+				",proces->parent->comm);
+			}
+		}
+	}
+	return 0;
+}
diff -Nur linux-3.13.0/hello2/Makefile /usr/src/linux-3.13.0/hello2/Makefile
--- linux-3.13.0/hello2/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13.0/hello2/Makefile	2018-02-11 10:46:21.678711000 +0530
@@ -0,0 +1 @@
+obj-y := hello2.o
diff -Nur linux-3.13.0/include/linux/syscalls.h /usr/src/linux-3.13.0/include/linux/syscalls.h
--- linux-3.13.0/include/linux/syscalls.h	2018-02-15 23:27:52.000000000 +0530
+++ /usr/src/linux-3.13.0/include/linux/syscalls.h	2018-02-11 14:07:16.358501999 +0530
@@ -849,4 +849,6 @@
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
 asmlinkage long sys_seccomp(unsigned int op, unsigned int flags,
 			    const char __user *uargs);
+asmlinkage long sys_hello(int k,char *filename);
+asmlinkage long sys_hello2(int k);
 #endif
diff -Nur linux-3.13.0/Makefile /usr/src/linux-3.13.0/Makefile
--- linux-3.13.0/Makefile	2018-02-15 23:27:52.000000000 +0530
+++ /usr/src/linux-3.13.0/Makefile	2018-02-11 10:48:53.942711000 +0530
@@ -782,7 +782,7 @@
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ hello/ hello2/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -Nur linux-3.13.0/security/apparmor/net_names.h /usr/src/linux-3.13.0/security/apparmor/net_names.h
--- linux-3.13.0/security/apparmor/net_names.h	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13.0/security/apparmor/net_names.h	2018-02-10 20:04:43.692490043 +0530
@@ -0,0 +1,51 @@
+static const char *address_family_names[] = {
+[0] = "unspec",
+[1] = "unix",
+[2] = "inet",
+[3] = "ax25",
+[4] = "ipx",
+[5] = "appletalk",
+[6] = "netrom",
+[7] = "bridge",
+[8] = "atmpvc",
+[9] = "x25",
+[10] = "inet6",
+[11] = "rose",
+[13] = "netbeui",
+[14] = "security",
+[15] = "key",
+[16] = "netlink",
+[17] = "packet",
+[18] = "ash",
+[19] = "econet",
+[20] = "atmsvc",
+[21] = "rds",
+[22] = "sna",
+[23] = "irda",
+[24] = "pppox",
+[25] = "wanpipe",
+[26] = "llc",
+[27] = "ib",
+[29] = "can",
+[30] = "tipc",
+[31] = "bluetooth",
+[32] = "iucv",
+[33] = "rxrpc",
+[34] = "isdn",
+[35] = "phonet",
+[36] = "ieee802154",
+[37] = "caif",
+[38] = "alg",
+[39] = "nfc",
+[40] = "vsock",
+};
+#define AA_FS_AF_MASK "unspec unix local inet ax25 ipx appletalk netrom bridge atmpvc x25 inet6 rose netbeui security key netlink packet ash econet atmsvc rds sna irda pppox wanpipe llc ib can tipc bluetooth iucv rxrpc isdn phonet ieee802154 caif alg nfc vsock max"
+static const char *sock_type_names[] = {
+[1] = "stream",
+[2] = "dgram",
+[3] = "raw",
+[4] = "rdm",
+[5] = "seqpacket",
+[6] = "dccp",
+[10] = "packet",
+};
diff -Nur linux-3.13.0/security/tomoyo/builtin-policy.h /usr/src/linux-3.13.0/security/tomoyo/builtin-policy.h
--- linux-3.13.0/security/tomoyo/builtin-policy.h	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13.0/security/tomoyo/builtin-policy.h	2018-02-10 20:05:54.428490043 +0530
@@ -0,0 +1,12 @@
+static char tomoyo_builtin_profile[] __initdata =
+"";
+static char tomoyo_builtin_exception_policy[] __initdata =
+"initialize_domain /sbin/modprobe from any\n"
+"initialize_domain /sbin/hotplug from any\n"
+"";
+static char tomoyo_builtin_domain_policy[] __initdata =
+"";
+static char tomoyo_builtin_manager[] __initdata =
+"";
+static char tomoyo_builtin_stat[] __initdata =
+"";
diff -Nur linux-3.13.0/security/tomoyo/policy/exception_policy.conf /usr/src/linux-3.13.0/security/tomoyo/policy/exception_policy.conf
--- linux-3.13.0/security/tomoyo/policy/exception_policy.conf	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13.0/security/tomoyo/policy/exception_policy.conf	2018-02-10 20:05:40.552490043 +0530
@@ -0,0 +1,2 @@
+initialize_domain /sbin/modprobe from any
+initialize_domain /sbin/hotplug from any
diff -Nur linux-3.13.0/ubuntu/aufs/conf.str /usr/src/linux-3.13.0/ubuntu/aufs/conf.str
--- linux-3.13.0/ubuntu/aufs/conf.str	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13.0/ubuntu/aufs/conf.str	2018-02-10 20:24:29.728490043 +0530
@@ -0,0 +1,7 @@
+"CONFIG_AUFS_FS=m\n"
+"CONFIG_AUFS_BRANCH_MAX_127=y\n"
+"CONFIG_AUFS_SBILIST=y\n"
+"CONFIG_AUFS_EXPORT=y\n"
+"CONFIG_AUFS_INO_T_64=y\n"
+"CONFIG_AUFS_BR_HFSPLUS=y\n"
+"CONFIG_AUFS_BDEV_LOOP=y\n"
diff -Nur linux-3.13.0/ubuntu/aufs/conf.str.tmp /usr/src/linux-3.13.0/ubuntu/aufs/conf.str.tmp
--- linux-3.13.0/ubuntu/aufs/conf.str.tmp	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-3.13.0/ubuntu/aufs/conf.str.tmp	2018-02-15 23:10:53.077464175 +0530
@@ -0,0 +1,7 @@
+"CONFIG_AUFS_FS=m\n"
+"CONFIG_AUFS_BRANCH_MAX_127=y\n"
+"CONFIG_AUFS_SBILIST=y\n"
+"CONFIG_AUFS_EXPORT=y\n"
+"CONFIG_AUFS_INO_T_64=y\n"
+"CONFIG_AUFS_BR_HFSPLUS=y\n"
+"CONFIG_AUFS_BDEV_LOOP=y\n"
